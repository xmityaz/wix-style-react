@import '../common.scss';
@import './InputMixins.scss';

$gap: 6px;
$double-gap: 12px;
$material-gap: 8px;

.root {
    position: relative;
    display: flex;
    align-items: stretch;
    border: solid 1px;
    border-radius: 6px;
    @include BoxSizing();
    @include FontRoman();
}

.input-wrapper {
  display: flex;
  width: 100%;
}

.input {
    flex-grow: 1;
    flex-shrink: 1;
    min-width: 20px;
    padding: 0 $double-gap;
    margin: 0;
    border: 0;
    outline: 0;
    background: transparent;
    @include FontRoman();
    @include Placeholder($paletteE6);
    @include Selection($paletteB4);

    &[type=number] {
        -moz-appearance:textfield;

        &::-webkit-outer-spin-button,
        &::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
    }

    &.withPrefix { padding-left: 0; }
    &.withSuffix { padding-right: 0; }
    &.withSuffixes { padding-right: $gap; }
}

// Remove IE10+ automatically x button
.input::-ms-clear {
    display: none;
}

.prefixes,
.suffixes {
    display: flex;
    align-items: center;
    flex-shrink: 0;
    flex-grow: 0;
    min-width: 0;
    user-select: none;
}

.prefix,
.suffix {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;

    &:first-child .unit-separator { margin-left: $double-gap; }
    &:last-child .unit { padding-right: $double-gap; }
}

.roundInput {
    &.size-normal {
        border-radius: 18px;
    }
    &.size-small {
        border-radius: 15px;
    }
    &.size-large {
        border-radius: 27px;
    }
}

.size {
    &-small  { @include Size($height: 30px, $fontSize: 14px); }
    &-normal { @include Size($height: 36px, $fontSize: 16px); }
    &-large  { @include Size($height: 54px, $fontSize: 16px); }
}

.theme {
    &-normal {
        @include ThemeDefault($color: $D10, $borderColor: $B30, $backgroundColor: $D80);
        @include ThemeHover($backgroundColor: $B50);
        @include ThemeFocus($borderColor: $B20, $boxShadow: inset 0px 0px 5px 0px fade($B10, 60%));
        @include ThemeError($borderColor: $paletteR1, $boxShadow: inset 0px 0px 5px 0px fade($R10, 60%));
        @include ThemeDisable($color: $D10, $borderColor: $GR40, $backgroundColor: $D80);
    }
    &-paneltitle {
        @include ThemeDefault($color: white, $borderColor: #c1e4fe, $backgroundColor: rgba(22,45,61,0.6));
        @include ThemeHover($backgroundColor: rgba(22,45,61,0.4));
        @include ThemeFocus($borderColor: #4eb7f5, $boxShadow: inset 0 0 5px 0 rgba(56,153,236,0.6));
        @include ThemeError($borderColor: $paletteR1, $boxShadow: inset 0px 0px 5px 0px fade($R10, 60%));
        @include ThemeDisable($color: white, $borderColor: $GR40, $backgroundColor: rgba(22,45,61,0.6));
    }
    &-amaterial {

        .errorIcon {
            padding: 0 6px 16px;
            color: #f2564d;
        }

        border: 0;
        &.size-normal {
            padding-bottom: 4px;
            @include Size($height: 34px, $fontSize: 20px);
        }

        label,
        .input {
            color: #43515c;
        }

        label {
            font-size: 20px;
            transition:all .2s ease-in-out;
            position: absolute;
            top: 2px;
            padding: 0 12px;
        }

        .input {
            @include FontLight();
            @include Placeholder(rgba(0, 0, 0, 0));
            z-index: 100;
            transition: border-bottom .3s, border-color .3s, border-width .3s, border .3s ease-in-out;
            line-height: 1;
            display: block;
            margin-top: 0;

            background: none;
            border-radius: 0;
            border-style: solid; // Firefox fix

            // Fix number inputs in Firefox to be full-width
            width: 100%;
            box-sizing: border-box;
        }

        &.hasFocus,
        &.hasValue {
            .input {
                @include Placeholder($paletteE6);
            }
            input {
                border-bottom: 0;
            }

            .bar {
                &:before, &:after {
                    height: 2px;
                    background-color: #3899ec;
                }
            }
            label {
                top: -22px;
                font-size: 14px;
            }
        }

        .bar {
            position: absolute;
            bottom: 0;
            left: -1px;
            right: -1px;
            height: 1px;
            background: $D60;
            &:before, &:after {
                content: '';
                height: 1px;
                width: 0;
                bottom: 0;
                position: absolute;
                background: #000;
                transition: 0.3s all;
            }
            transition: 0.3s ease all;
        }
        @at-root {
            .hasFocus .barBlue:before,
            .hasFocus .barBlue:after {
                width:100%;
            }
        }

        .input:hover ~ .barBlue, .input.hasHover ~ .barBlue {
            background-color: #000;
            transition: 0.3s ease all;
        }

        &.hasError {
            .bar, .input:hover ~ .barBlue, .input.hasHover ~ .barBlue {
                background-color: #f2564d;
                height: 2px;
            }
        }
    }
    &-material {
        border-radius: 0;
        .prefixes,
        .suffixes {
            padding: 0 4px;
        }
        &.size-normal {
            @include Size($height: 34px, $fontSize: 18px);
        }
        .input {
            @include FontLight();
            padding: 0 $material-gap;
        }
        @include ThemeDefault($color: $D10, $borderColor: transparent, $backgroundColor: $D80);
        .bar {
            position: absolute;
            bottom: 0;
            left: -1px;
            right: -1px;
            height: 1px;
            background: $D60;
            &:before, &:after {
                content: '';
                height: 1px;
                width: 0;
                bottom: 0;
                position: absolute;
                background: $D50;
                transition: 0.2s ease all;
            }
            &:before { left: 50%; }
            &:after { right: 50%; }
        }
        @at-root {
            .hasFocus .barBlack:before,
            .hasFocus .bar:after {
                width: 50%;
            }
        }
        &.hasError {
            .bar {
                background: $R05;
                &:before, &:after {
                    background: $R05;
                }
            }
        }
    }

    &-flat {
        border: none;
        border-radius: 0;

        &.size-large { @include Size($height: 54px, $fontSize: 20px); }
       
        &:hover, &.hasFocus { @include ThemeFlat($B20); }
        &:active            { @include ThemeFlat($B10); }
        &.disabled          { @include ThemeFlat($D50); }

        @include ThemeFlat($D20);
    }

    &-flatdark {
        border: none;
        border-radius: 0;

        &.size-large { @include Size($height: 54px, $fontSize: 20px); }
        
        &:hover, &.hasFocus { @include ThemeFlat($B20); }
        &:active            { @include ThemeFlat($B10); }
        &.disabled          { @include ThemeFlat($D50); }

        @include ThemeFlat($D80);
    }
}

// RTL layout based on global style set on document body or parent element.
:global(.rtl) {
    .root,
    .input-wrapper,
    .prefixes,
    .suffixes { flex-direction: row-reverse; }
    .input {
      direction: rtl;

      &.withPrefix { padding-right: 0; padding-left: $double-gap; }
      &.withSuffix { padding-left: 0; padding-right: $double-gap; }
    }

    .prefix,
    .suffix {
      &:first-child .unit-separator { margin-right: $double-gap; margin-left: $gap; }
      &:last-child .unit { padding-left: $double-gap; padding-right: $gap; }
    }
}

// RTL layout based on a property passed directly to the component.
.rtl.root {
    flex-direction: row-reverse;
    .prefixes,
    .suffixes { flex-direction: row-reverse; }
    .input { direction: rtl; }
}

.magnifying-glass {
    margin: 0 $gap;
    display: flex;
    flex-direction: column;
    justify-content: center;

    path { fill: $B10; }
    line { stroke: $B10; }

    &[disabled] {
        path { fill: $GR40; }
        line { stroke: $GR40; }
    }
}

.exclamation {
    margin: 0 $gap;
    background-color: $paletteR1;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;

    path { stroke: #fff; }
}

.help {
    margin: 0 $gap;
    color: $B20;
    padding-top: 4px;
}

.amaterial-help {
    margin: 0 $gap;
    color: $B20;
    padding-bottom: 14px;
}

.clear-button {
    cursor: pointer;
    padding: 0 $double-gap;
    height: 6px;
    line-height: 6px;
    font-size: 6px;

    path { stroke: $B10; }
}

.unit {
    padding: 0 $gap;
    font-size: 13px;
    line-height: 18px;
    color: $paletteD3;
    @include FontLight();
}

.unit-separator {
    width: 1px;
    margin: 0 $gap;
    background-color: $paletteB4;
    height: 18px;

    @at-root {
        .hasError .unit-separator {
            background-color: $paletteR1;
        }
    }
}

.menu-arrow {
    padding: 0 $gap;
    path { fill: $B10; }

    &[disabled] {
        path { fill: $GR40; }
        line { stroke: $GR40; }
    }
}

.roundInput {
    .menu-arrow {
        padding: 0 $double-gap;
    }
}

.materialTitle {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}